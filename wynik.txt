.editorconfig
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false

.eslintrc.cjs
const path = require('path');

module.exports = {
  env: {
    browser: true,
    commonj: true,
    es6: true,
    node: true,
    es2022: true,
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: path.join(__dirname, './tsconfig.json'),
    tsconfigRootDir: './src',
  },
  settings: {
    react: {
      version: 'detect',
    },
    'import/resolver': {
      node: {
        paths: ['src'],
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
      },
    },
  },
  extends: [
    'airbnb',
    'airbnb-typescript',
    'airbnb/hooks',
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:import/recommended',
    'plugin:react-hooks/recommended',
    'plugin:@typescript-eslint/recommended',
    'eslint-config-prettier',
    'plugin:storybook/recommended',
  ],
  plugins: ['react', '@typescript-eslint', 'simple-import-sort', 'prettier'],
  rules: {
    'simple-import-sort/imports': 'error',
    'simple-import-sort/exports': 'error',
    'import/first': 'error',
    'import/newline-after-import': 'error',
    'import/no-duplicates': 'error',
    'react/jsx-uses-react': 0,
    'react/react-in-jsx-scope': 0,
    'prettier/prettier': [
      'error',
      {
        endOfLine: 'auto',
      },
    ],
    'import/no-extraneous-dependencies': 'off',
    'no-use-before-define': [
      'error',
      {
        functions: false,
        classes: true,
        variables: true,
      },
    ],
    'valid-typeof': 'off',
    'no-console': [
      'error',
      {
        allow: ['warn', 'error'],
      },
    ],
    '@typescript-eslint/no-unused-vars': [
      'error',
      {
        vars: 'all',
        args: 'after-used',
      },
    ],
    'prefer-destructuring': [
      'error',
      {
        object: true,
        array: true,
      },
    ],
    'max-classes-per-file': [
      'error',
      {
        ignoreExpressions: true,
        max: 2,
      },
    ],
    '@typescript-eslint/indent': ['error', 2],
    'sort-imports': [
      'error',
      {
        ignoreCase: true,
        ignoreDeclarationSort: true,
      },
    ],
    'import/extensions': 'off',
    'import/no-named-as-default': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
  },
  overrides: [
    {
      env: {
        node: true,
      },
      files: ['.eslintrc.{js,cjs}'],
      parserOptions: {
        sourceType: 'script',
      },
    },
  ],
};

.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
package-lock.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Husky
.husky/_

.lintstagedrc
{
  '{,src/**/}*.{md,json,ts,tsx,js,jsx,css,scss,html,yml}': ['git add']
}

.npmrc
legacy-peer-deps=true

.nvmrc
lts/fermium

.prettierignore
dist/
node_modules/
package-lock.json

.prettierrc
{
  "tabWidth": 2,
  "useTabs": false,
  "singleQuote": true,
  "semi": true,
  "bracketSpacing": true,
  "arrowParens": "avoid",
  "trailingComma": "es5",
  "bracketSameLine": false,
  "printWidth": 140,
  "endOfLine": "auto",
  "overrides": [
    {
      "files": "*.html",
      "options": {
        "parser": "html"
      }
    },
    {
      "files": "*.component.html",
      "options": {
        "parser": "react"
      }
    },
    {
      "files": "*.scss",
      "options": {
        "singleQuote": false
      }
    }
  ]
}

.stylelintrc
{
  "extends": [
    "stylelint-config-recommended",
    "stylelint-config-standard-scss"
  ],
  "rules": {
    "value-keyword-case": [
      "lower",
      {
        "ignoreFunctions": [
          "t",
          "var"
        ]
      }
    ],
    "scss/dollar-variable-pattern": [
      "[a-z][a-zA-Z]+",
      {
        "ignore": "local"
      }
    ],
    "no-descending-specificity": null,
    "selector-class-pattern": null,
    "scss/no-global-function-names": null
  }
}

index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;0,900;1,400;1,500;1,700;1,900&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div id="app"></div>
     <script type="module" src="/src/index.tsx"></script>
  </body>
</html>

package.json
{
  "name": "weather-widget-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "engines": {
    "node": ">=18.14.2",
    "npm": ">=9.5.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "prettier:format": "prettier --write --html-whitespace-sensitivity ignore src/**/*{.tsx,.ts,.js,.jsx,.json,.css,.scss,.html}",
    "prepare": "husky .husky"
  },
  "lint-staged": {
    "{,src/**/}*.{md,json,ts,tsx,js.jsx,css,scss,yml,html}": [
      "git add"
    ]
  },
  "dependencies": {
    "axios": "^1.7.7",
    "classnames": "^2.5.1",
    "dayjs": "^1.11.13",
    "i18next": "^23.16.4",
    "i18next-browser-languagedetector": "^8.0.0",
    "i18next-http-backend": "^2.6.2",
    "js-cookie": "^3.0.5",
    "ol": "^10.2.1",
    "primereact": "^10.8.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.1",
    "react-i18next": "^15.1.0",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.27.0",
    "web-vitals": "^4.2.4"
  },
  "devDependencies": {
    "@babel/plugin-proposal-decorators": "^7.25.9",
    "@babel/plugin-proposal-optional-chaining": "^7.21.0",
    "@babel/plugin-transform-class-properties": "^7.25.9",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.0.1",
    "@types/jest": "^29.5.14",
    "@types/js-cookie": "^3.0.6",
    "@types/lodash": "^4.17.13",
    "@types/node": "^22.8.6",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^8.12.2",
    "@typescript-eslint/parser": "^8.12.2",
    "@vitejs/plugin-react": "^4.3.3",
    "eslint": "^9.13.0",
    "eslint-config-airbnb": "^19.0.4",
    "eslint-config-airbnb-typescript": "^18.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-config-standard-with-typescript": "^43.0.1",
    "eslint-import-resolver-typescript": "^3.6.3",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jasmine": "^4.2.2",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-n": "^17.12.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-promise": "^7.1.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "husky": "^9.1.6",
    "lint-staged": "^15.2.10",
    "path": "^0.12.7",
    "postcss": "^8.4.47",
    "postcss-scss": "^4.0.9",
    "prettier": "^3.3.3",
    "prettier-eslint": "^16.3.0",
    "sass": "^1.80.5",
    "sass-loader": "^16.0.2",
    "stylelint": "^16.10.0",
    "stylelint-config-recommended": "^14.0.1",
    "stylelint-config-standard-scss": "^13.1.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.6.3",
    "vite": "^5.4.10",
    "vite-plugin-babel": "^1.2.0",
    "vite-plugin-eslint": "^1.8.1",
    "vite-plugin-svgr": "^4.2.0",
    "vite-tsconfig-paths": "^5.0.1"
  },
  "recommendations": [
    "esbenp.prettier-vscode",
    "dbaeumer.vscode-eslint",
    "stylelint.vscode-stylelint",
    "yoavbls.pretty-ts-errors"
  ],
  "browserslist": [
    "last 5 Chrome version",
    "last 15 Firefox version",
    "last 4 Edge major versions",
    "last 4 Safari major versions",
    "last 2 iOS major versions",
    "Firefox ESR",
    "not ios_saf 15.2-15.3",
    "not safari 15.2-15.3"
  ]
}

scrypt.ps1
# Skrypt PowerShell do odczytania plików i zapisania zawartości
$folderPath = "."  # Bieżący katalog
$outputFile = "./wynik.txt"
$excludedFolders = @("src", ".husky", ".vscode", "node_modules")  # Katalogi do wykluczenia
$excludedFiles = @("package-lock.json", "wynik.txt", "skrypt.ps1", "README.md")  # Pliki do wykluczenia

# Tworzymy (lub zastępujemy) plik wynikowy
if (Test-Path $outputFile) { Remove-Item $outputFile }
New-Item -Path $outputFile -ItemType File -Force

# Iterujemy przez wszystkie pliki w bieżącym katalogu
Get-ChildItem -Path $folderPath -Recurse -File | ForEach-Object {
    $relativePath = $_.FullName.Substring((Get-Location).Path.Length + 1)
    
    # Sprawdzamy, czy plik należy do wykluczonych katalogów lub plików
    $isExcludedFolder = $excludedFolders | ForEach-Object { $relativePath -like "*$_*" } | Where-Object { $_ -eq $true }
    $isExcludedFile = $excludedFiles -contains $_.Name

    if (-not $isExcludedFolder -and -not $isExcludedFile) {
        # Odczytujemy zawartość pliku
        $fileName = $_.FullName
        if (Test-Path $fileName) {
            $fileContent = Get-Content -Path $fileName -ErrorAction SilentlyContinue
            if ($fileContent) {
                # Zapisujemy nazwę pliku i zawartość do pliku wynikowego
                Add-Content -Path $outputFile -Value "$($_.Name)"
                Add-Content -Path $outputFile -Value $fileContent  # Dodaje zawartość jako osobne linie
                Add-Content -Path $outputFile -Value ""  # Przerwa między plikami
            } else {
                Write-Output "Błąd odczytu pliku: $fileName"
            }
        }
    }
}

tsconfig.json
{
  "compilerOptions": {
    "baseUrl": "./src",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": [
      "ES2021",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "node",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true
  },
  "include": [
    "src",
    ".eslintrc.cjs",
    ".vite.config.ts"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}

tsconfig.node.json
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true,
  },
  "include": [
    "vite.config.ts"
  ]
}

vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import sass from 'sass';
import tsconfigPaths from 'vite-tsconfig-paths';
import svgr from 'vite-plugin-svgr';

export default defineConfig({
  plugins: [
    react({
      babel: {
        plugins: [
          ['@babel/plugin-proposal-decorators', { legacy: true }],
          ['@babel/plugin-transform-class-properties', { loose: true }],
        ],
      },
    }),
    tsconfigPaths(),
    svgr({ include: '**/*.svgr.svg' }),
  ],
  css: {
    preprocessorOptions: {
      scss: {
        implementation: sass,
      },
    },
  },
  build: {
    target: 'esnext',
  },
});

