ProgressCircle.tsx
const ProgressCircle: React.FC<{ title: string; progress: number; countdown: number }> = ({ title, progress, countdown }) => (
  <div className="progress">
    <span className="title">{title}</span>

    <svg viewBox="0 0 36 36" className="circular-chart">
      <path
        className="circle"
        strokeDasharray={`${progress}, 100`}
        d="M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831"
      />
    </svg>

    <span className="countdown">{countdown}s</span>
  </div>
);

export default ProgressCircle;


WeatherWidget.const.tsx
export const API_URL = 'https://api.openweathermap.org/data/2.5/weather';


weatherWidget.model.tsx
export interface IWeatherMain {
  temp: number;
}

export interface IWeatherDescription {
  description: string;
  icon: string;
}

export interface IWeatherResponse {
  id: number;
  name: string;
  main: IWeatherMain;
  weather: IWeatherDescription[];
}

export interface IWeatherData {
  id?: number;
  city?: string;
  temp?: number;
  description?: string;
  icon?: string;
}


WeatherWidget.scss
.widget {
  display: flex;
  flex: 1;
  flex-direction: column;
  gap: 5px;
  font-family: var(--font-roboto);
  cursor: pointer;
  align-self: center;

  &-container {
    display: flex;
  }

  & .city,
  & .temperature,
  & .description {
    text-align: center;
    color: var(--color-orange);
    font-size: 1.5rem;
  }

  & .temperature {
    font-size: 1.4rem;
  }

  & .description {
    font-size: 1.2rem;
  }

  & .img-fluid {
    max-height: 120px;
  }
}

.progress {
  display: flex;
  flex-direction: column;
  align-items: center;

  &-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-evenly;
  }

  & .circular-chart {
    width: 50px;
    height: 50px;
    transform: rotate(-90deg);
    display: inline-block;

    & .circle {
      fill: none;
      stroke-width: 3;
      stroke: var(--color-orange);
      stroke-linecap: round;
      transition: stroke-dasharray 1s ease-in-out;
    }
  }

  & .countdown {
    margin-top: -36px;
    font-size: 1.2rem;
    color: var(--color-orange);
  }
}

.title {
  font-size: 12px;
  color: var(--color-orange);
  line-height: initial;
  margin-bottom: 0.5rem;
}


WeatherWidget.tsx
import React, { useState, useEffect, useMemo } from 'react';
import ProgressCircle from './ProgressCircle';
import { API_URL } from './WeatherWidget.const';
import { IWeatherData, IWeatherResponse } from './weatherWidget.model';
import './WeatherWidget.scss';
import { API_KEY } from 'common/map/map.constants';
import axios from 'axios';
import { toHttpParams } from 'core/http/http.utils';

interface WeatherWidgetProps {
  cities: string[];
  className: string;
}

const REFRESH_INTERVAL_SECONDS = 10;
const CITY_SELECTION_INTERVAL_SECONDS = 60;

const WeatherWidget: React.FC<WeatherWidgetProps> = ({ cities, className }) => {
  const [selectedCities, setSelectedCities] = useState<string[]>([]);
  const [weatherData, setWeatherData] = useState<IWeatherData[]>([]);
  const [tick, setTick] = useState(0);

  const refreshProgress = useMemo(
    () => ((REFRESH_INTERVAL_SECONDS - (tick % REFRESH_INTERVAL_SECONDS)) / REFRESH_INTERVAL_SECONDS) * 100,
    [tick]
  );

  const citySelectionProgress = useMemo(
    () => ((CITY_SELECTION_INTERVAL_SECONDS - (tick % CITY_SELECTION_INTERVAL_SECONDS)) / CITY_SELECTION_INTERVAL_SECONDS) * 100,
    [tick]
  );

  const fetchWeatherData = async (cities: string[]): Promise<IWeatherData[]> => {
    try {
      const requests = cities.map(city => {
        const queryParams = toHttpParams({
          q: city,
          appid: API_KEY,
          units: 'metric',
        });
        return axios.get<IWeatherResponse>(`${API_URL}?${queryParams}`);
      });

      const responses = await axios.all(requests);
      return responses.map(response => {
        const { id, name, main, weather } = response.data;
        return {
          id,
          city: name ?? '',
          temp: main?.temp ?? null,
          description: weather[0].description,
          icon: `https://openweathermap.org/img/wn/${weather[0].icon}.png`,
        };
      });
    } catch (error) {
      console.error('Failed to fetch weather data:', error);
      return [];
    }
  };

  const selectRandomCities = () => {
    return [...cities].sort(() => 0.5 - Math.random()).slice(0, 3);
  };

  const updateWeatherData = async () => {
    const data = await fetchWeatherData(selectedCities);
    setWeatherData(data);
  };

  const updateSelectedCities = () => {
    setSelectedCities(selectRandomCities());
  };

  useEffect(() => {
    updateSelectedCities();
    updateWeatherData();
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setTick(prevTick => prevTick + 1);

      if (tick % REFRESH_INTERVAL_SECONDS === 0) updateWeatherData();
      if (tick % CITY_SELECTION_INTERVAL_SECONDS === 0) updateSelectedCities();
    }, 1000);

    return () => clearInterval(interval);
  }, [tick, selectedCities]);

  const openCity = (id?: number) => {
    if (id) window.open(`https://openweathermap.org/city/${id}`, '_blank');
  };

  return (
    <div className={'widget-container' + ' ' + className}>
      <div className="progress-container">
        <ProgressCircle
          title="Next to refresh"
          progress={refreshProgress}
          countdown={REFRESH_INTERVAL_SECONDS - (tick % REFRESH_INTERVAL_SECONDS)}
        />
        <ProgressCircle
          title="Next to random city"
          progress={citySelectionProgress}
          countdown={CITY_SELECTION_INTERVAL_SECONDS - (tick % CITY_SELECTION_INTERVAL_SECONDS)}
        />
      </div>

      {weatherData?.map(city => (
        <div className={'widget'} key={city.id} onClick={() => openCity(city.id)}>
          <h3 className="city">{city.city}</h3>
          <div className="flex-center">
            <img className="img-fluid" src={city.icon} alt={city.description} />
          </div>
          <span className="temperature">{city.temp?.toFixed(1)}Â°C</span>
          <span className="description">{city.description}</span>
        </div>
      ))}
    </div>
  );
};

export default WeatherWidget;


